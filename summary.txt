Summary of Complete Project Setup
Here's a comprehensive summary of what we've accomplished for both parts of your project:
Apache Setup (First Virtual Interface)

Virtual Interface Configuration

Set up the first virtual interface (eth0.100) with IP 192.168.43.224
Verified the interface was properly configured and active


Apache2 Installation and Configuration

Installed and configured Apache2 web server
Created a virtual host configuration for the domain 25503.auca.ac.rw
Configured Apache to listen on the virtual interface IP
Set up the document root at /var/www/auca-education


Web Content Creation

Created a static HTML page for AUCA Education
Added your student information (ID: 25503, Name: Ngabonziza Cedrick Kennedy)
Set proper permissions for the web files


Domain Configuration

Added entry in the hosts file for 25503.auca.ac.rw
Verified the domain resolution was working correctly


Testing

Confirmed that Apache was serving the static AUCA Education page
Accessed the site successfully via the configured domain name



Nginx Portfolio Setup (Second Virtual Interface)

Virtual Interface Configuration

Set up the second virtual interface (eth0.200) with IP 192.168.43.225
Verified the interface was properly configured and active


Database Installation and Configuration

Installed and configured MariaDB for the portfolio database
Created a database called portfolio_db
Set up a database user with appropriate permissions
Created necessary tables: user_info, skills, and experience
Populated the tables with initial data


Web Server Installation and Configuration

Installed Nginx and PHP-FPM (php8.4-fpm)
Configured Nginx to listen on port 8080 on the second virtual interface
Set up PHP-FPM to process PHP files
Created a server configuration for portfolio.auca.ac.rw


Dynamic Portfolio Website

Created the directory structure at /var/www/portfolio
Implemented the PHP files (index.php and process.php)
Set up the file upload functionality for profile pictures
Configured proper file permissions


Portfolio Features

Implemented light/dark theme switching functionality
Created CRUD operations for profile, skills, and experience
Set up dynamic data retrieval from the database
Configured the user interface with interactive elements


Performance Optimization

Configured PHP-FPM with optimized settings
Fine-tuned Nginx for better performance
Adjusted MariaDB for improved database operations


Testing

Verified Nginx was listening on the correct port and IP
Successfully accessed the portfolio through a web browser
Confirmed all dynamic functionality was working



Current Status

AUCA Education Site: Accessible via HTTP at http://25503.auca.ac.rw
Portfolio Site: Accessible via HTTP at http://portfolio.auca.ac.rw:8080
Both sites are operational and meet the basic requirements of the project

Comprehensive Project Implementation Notes - Part 1
Network and Web Server Configuration
Virtual Interface Setup

First Virtual Interface (Apache)

Interface: eth0.100
IP Address: 192.168.43.224
Configuration verified with ip addr show


Second Virtual Interface (Nginx)

Interface: eth0.200
IP Address: 192.168.43.225
Configuration verified with ip addr show



Web Services Configuration

Apache Setup (AUCA Education Site)

Domain: 25503.auca.ac.rw
Document Root: /var/www/auca-education
Static content displaying AUCA education information
Student information included (ID: 25503, Name: Ngabonziza Cedrick Kennedy)


Nginx Setup (Portfolio Site)

Domain: portfolio.auca.ac.rw
Port: 8443 (for HTTPS)
Document Root: /var/www/portfolio
Dynamic content with light/dark theme switching
Database integration (MariaDB)
PHP processing configured



Security Implementation
HTTPS Configuration

Apache SSL Setup

Generated self-signed certificate and key:
/etc/ssl/certs/apache-selfsigned.crt
/etc/ssl/private/apache-selfsigned.key

SSL configuration in /etc/apache2/sites-available/25503.auca.ac.rw-ssl.conf
HTTPS accessible at https://25503.auca.ac.rw


Nginx SSL Setup

Generated self-signed certificate and key:
/etc/nginx/ssl/portfolio-selfsigned.crt
/etc/nginx/ssl/portfolio-selfsigned.key

SSL configuration in /etc/nginx/sites-available/portfolio
HTTPS accessible at https://portfolio.auca.ac.rw:8443



Web Application Firewall (ModSecurity)

ModSecurity for Apache

Installed with libapache2-mod-security2
Configuration path: /etc/modsecurity/modsecurity.conf
OWASP Core Rule Set implemented
Active protection mode (SecRuleEngine On)
Successfully blocking XSS attacks (verified with testing)



Firewall Configuration (UFW)

UFW Setup

Default policy: deny incoming, allow outgoing
Allowed services:

SSH (port 22)
HTTPS for Apache (port 443)
HTTPS for Nginx (port 8443)


Verified active with sudo ufw status verbose



SSH Security

IP-based Access Restrictions

Configuration in /etc/hosts.allow and /etc/hosts.deny
Only allows SSH connections from 192.168.43.0/24 network
Blocks all other SSH connection attempts


Two-Factor Authentication

Implemented using Google Authenticator
PAM configuration in /etc/pam.d/sshd
SSH configuration in /etc/ssh/sshd_config
Verification code required for login
Successfully tested from host machine (192.168.43.164)



Performance Optimization

Nginx Performance Tuning

FastCGI caching implemented
Browser caching for static assets
Gzip compression enabled
Optimized buffer settings
Response time: 57ms (tested with curl)
Handles 250+ requests per second under load



Testing and Validation

Web Services

Both sites accessible via HTTPS with their domain names
Successfully accessible from host machine
Verified through browser access


Security Features

ModSecurity protection verified (returns 403 Forbidden for XSS attempts)
UFW rules confirmed active
SSH 2FA login successfully tested from Windows host



Configuration Files

Apache Configuration

Main config: /etc/apache2/apache2.conf
Virtual host: /etc/apache2/sites-available/auca-education.conf
SSL config: /etc/apache2/sites-available/25503.auca.ac.rw-ssl.conf
ModSecurity: /etc/modsecurity/modsecurity.conf


Nginx Configuration

Main config: /etc/nginx/nginx.conf
Virtual host: /etc/nginx/sites-available/portfolio
SSL certificates: /etc/nginx/ssl/


Security Configuration

UFW: Managed via ufw command
SSH: /etc/ssh/sshd_config
SSH PAM: /etc/pam.d/sshd
IP restrictions: /etc/hosts.allow and /etc/hosts.deny
Google Authenticator: ~/.google_authenticator

Documentation for Part 2: Docker Deployment
Overview
This documentation covers the implementation of Docker containerization for the Portfolio system as part of the project requirements. The Docker implementation allows for portable, consistent deployment of the web application across different environments.
Implementation Steps
1. Docker Installation
Docker was successfully installed on the Kali Linux VM to enable containerization capabilities:
bash# Update package index
sudo apt update

# Install dependencies
sudo apt install -y apt-transport-https ca-certificates curl software-properties-common

# Add Docker's GPG key
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

# Set up Docker repository
echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian bullseye stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# Update package database with Docker packages
sudo apt update

# Install Docker
sudo apt install -y docker-ce docker-ce-cli containerd.io

# Verify Docker installation
sudo docker run hello-world
The Docker installation was verified with the hello-world container, which successfully displayed the confirmation message indicating that Docker was working correctly.
2. Docker Compose Installation
Docker Compose was installed to manage multi-container applications:
bash# Download Docker Compose
sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

# Apply executable permissions
sudo chmod +x /usr/local/bin/docker-compose

# Verify installation
docker-compose --version
Docker Compose v2.36.0 was successfully installed and verified.
3. Project Structure Setup
A dedicated directory structure was created for the Docker project:
bash# Create project directory
mkdir -p ~/docker-portfolio
cd ~/docker-portfolio

# Create Docker Compose configuration
nano docker-compose.yml

# Create a directory for the test HTML content
mkdir -p test-html
4. Docker Compose Configuration
A Docker Compose file was created to define the container configuration:
yamlservices:
  web:
    image: nginx:latest
    ports:
      - "9090:80"
    volumes:
      - ./test-html:/usr/share/nginx/html
    restart: always

networks:
  default:
    driver: bridge
This configuration:

Uses the official Nginx image
Maps port 9090 on the host to port 80 in the container
Mounts the local test-html directory to the container's web root
Configures the container to automatically restart
Uses the default bridge network for container connectivity

5. Test HTML Content
A sophisticated test page was created to verify the Docker container's functionality:
html<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Docker Test</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap');
        
        :root {
            --primary: #4361ee;
            --secondary: #3a0ca3;
            --accent: #f72585;
            --light: #f8f9fa;
            --dark: #212529;
            --success: #4cc9f0;
        }
        
        /* Additional CSS styles... */
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Docker Container Works!</h1>
            <div class="subtitle">Container technology in action</div>
        </header>
        
        <div class="content">
            <div class="info-box">
                <p>This is a test page served from a Docker container. Containerization allows applications to run in isolated environments with all dependencies bundled together.</p>
            </div>
            
            <div class="docker-animation">
                <svg class="docker-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512">
                    <!-- SVG path data -->
                </svg>
            </div>
            
            <div class="student-info">
                <div>
                    <span class="badge">Student ID</span> 25503
                </div>
                <div>
                    <span class="badge">Name</span> Ngabonziza Cedrick Kennedy
                </div>
            </div>
        </div>
        
        <footer>
            <p>Docker + NGINX Test Page &copy; 2025</p>
        </footer>
    </div>
</body>
</html>
6. Container Deployment
The Docker container was deployed using Docker Compose:
bash# Start the container in detached mode
sudo docker-compose up -d
The container was successfully started, with Docker downloading the Nginx image and creating the container according to the configuration.
7. Firewall Configuration
UFW was configured to allow access to the Docker container's port:
bash# Allow access to the Docker web server port
sudo ufw allow 9090/tcp
The UFW rules were verified to be correctly configured.
8. Container Verification
The Docker container was verified to be running correctly:
bash# Check container status
sudo docker ps

# Check container logs
sudo docker-compose logs web

# Test local access
curl http://localhost:9090
The container was successfully running, and the test page was accessible locally on the Kali Linux VM.
Technical Notes

Docker Networking:

The container uses bridge networking, which is Docker's default network driver
Port 9090 on the host is mapped to port 80 in the container


Volume Mounting:

The host directory ./test-html is mounted to /usr/share/nginx/html in the container
Changes to files in the host directory are immediately reflected in the container


Container Management:

Docker Compose is used for easy container management
The restart: always policy ensures the container automatically restarts if it stops


Security Configuration:

UFW was configured to allow traffic to port 9090
The container runs with default Docker security constraints



Current Status

The Docker container is successfully running and serving the test page
The container is accessible at http://192.168.43.225:9090 from the Kali Linux VM
The container is configured to restart automatically if stopped

Docker Implementation Progress Notes
Overview
We successfully implemented Docker containerization for the Portfolio project, creating a simple test container and verifying its functionality. The container is now accessible both from the Kali VM and from the host machine.
Implementation Steps Completed
1. Docker Installation

Successfully installed Docker on Kali Linux:
bashsudo apt update
sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian bullseye stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt update
sudo apt install -y docker-ce docker-ce-cli containerd.io

Verified installation with the "hello-world" container:
bashsudo docker run hello-world


2. Docker Compose Installation

Installed Docker Compose:
bashsudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

Verified installation:
bashdocker-compose --version
Output: Docker Compose version v2.36.0

3. Project Directory Setup

Created a project directory structure:
bashmkdir -p ~/docker-portfolio
cd ~/docker-portfolio


4. Docker Compose Configuration

Created a Docker Compose file:
bashnano docker-compose.yml

Configuration content:
yamlservices:
  web:
    image: nginx:latest
    ports:
      - "9090:80"
    volumes:
      - ./test-html:/usr/share/nginx/html
    restart: always

networks:
  default:
    driver: bridge


5. Enhanced HTML Test Page

Created a test HTML page with advanced styling and animations:
bashmkdir -p test-html
nano test-html/index.html

Implemented a responsive, modern design with CSS animations and transitions
Added Docker branding and student information
Created a visually appealing user interface

6. Container Deployment

Successfully deployed the container:
bashsudo docker-compose up -d

Initially encountered a port conflict that was resolved by changing the port mapping

7. Firewall Configuration

Added rules to UFW to allow Docker container access:
bashsudo ufw allow 9090/tcp

Verified firewall rules:
bashsudo ufw status


8. Container Verification

Tested access locally from Kali VM:
bashcurl http://localhost:9090

Initial connectivity issues were resolved by reconfiguring Docker and network settings
Performed load testing with Apache Benchmark:
bashab -n 20 -c 5 -k http://192.168.43.225:9090/

Results showed excellent performance: 250+ requests per second with no failed requests

9. Cross-Machine Testing

Successfully accessed the Docker container from the host machine at http://192.168.43.225:9090/
Initial connectivity issues were resolved through:

Network configuration adjustments
Ensuring SSH connectivity (which indicated proper network setup)
Firewall rule verification



Current Status

Docker container is running and accessible at http://192.168.43.225:9090/
Container automatically restarts if it stops
Test page is properly served from the container
The container is accessible from both the Kali VM and the host machine

Next Steps for Project Completion

Containerize the Portfolio Application:

Create Dockerfiles for the web application and database
Configure Docker Compose for multi-container setup


Implement Traefik Load Balancer:

Install and configure Traefik
Set up load balancing across containers
Configure TLS encryption with Let's Encrypt


High Availability Configuration:

Set up multiple container nodes
Configure Traefik for failover


Security Implementation:

Add user authentication
Configure API key-based access
Implement additional security mechanisms
